MACRO LANGUAGE
==============

INTRO
-----

The new macro language is considered experimental.  Not all functions have
been tested.  The system is based on virtual commands.  In addition to the
macro language, a new "action" has been defined, "toggleStatus" which works
like "getStatus" and "setStatus" combined.

A "Command" is a single word, normally the parameter of a "sendCommand". It
may be a virtual command or actual IR data.

Virtual commands are defined like normal, in either the global or per-device
"Commands" section.  List the virtual command name as the lvalue and as the
right value you may use an instruction such as:
    PRINT   Prints the string, which may contain URL parameters
    SET     And a single variable to set to 1
    CLEAR   And a single variable to set to 0
    TOGGLE  And a single variable to set to toggle
    MACRO   Followed by a list of commands.  Any command may be followed by
            a comma and a repeat count.  You may also use the virtual "sleep"
            commands (sleep, sleep2, sleep3, etc) to pause for a set number
            of seconds.  The list is space separated.
            TO DO: Add parameters such that command(param=xxx) will set
            the given parameter before running the command
    SH      Short shell command to run, $param substitution is done
            WARNING!  $parameters are passed directly to the OS!  However,
            shell expansions and such are NOT done.  There is no shell!
    CANCEL  And a single variable, the timer to cancel
    RELAY   followed by a device to relay the command to.  This is only
            here so that you don't have to use command(device=xxxx) in
            a million places.  If you prefer, you can set a device for
            a command using parameter syntax if you need to, and even
            set it to a parameter.  Likewise "RELAY $otherdevice" works
    NOP     Do nothing at all.  This is useful when you want to use an on/off
            command purely for the trigger, without any actual command.  This
            will stop you from getting error messages.  Anything after the
            NOP is guaranteed to be ignored, so you can also use this to
            "comment out" a command.

Any other "rvalue" should be an IR code created with "learnCommand"

PARAMETERS: The MACRO lines can contain parameter expansions as well, so
you can determine what code is excuted via URL query parameters.  You can
also set these parameters in MACRO lines by placing them in parenthesis
right after the command, Ex: printIt = MACRO printLine(line=Hello Now)
Multiple parameters can be set by command separating them.  You can
even set the device used (to make a command on one device trigger another)
by setting the "device" parameter to the named device section.  The variables
in Status sections are unrelated.  If you wish to test a passed parameter,
use the format $status(varname).  This will always be the word "status",
in all lowercase, with the name of the status variable in parenthesis.


VARIABLES
---------

The Status section is now made up of both a global and a per-device section,
depending on the URL used.  It is not restricted to just 0 or 1 values.  The
status section now allows storage variables for logical expressions.  You
can test and set status variables as well as expand parameters passed from
the URL.

You'll notice that commands that end in on or off automatically set a status
variable to 1 or 0.  This then looks for command without the on or off.  If
such a command exists, it is assumed to be a toggle and ONLY sent if the
value of the associated status variable has changed.  You should make sure
that no other sources (such as a manual remote) send this code so that the
variable stays in sync.  If there is no such command, but an exact match
(with the on/off at the end) is defined, then this command is sent without
regard to the state of the status variable, although the value is still
written to allow queries from external interfaces.


SECTIONS
--------

Special sections start with a keyword, a space, and the name of the virtual
command which you want to define.  Parameters to the device are listed as
values in the section.

The following keywords are defined

    WOL     This section is used to send a WOL packet to a host.
        mac     the mac address to send the packet to
        ip      the ip address to send the packet to
        port    optional (defaults to 7)

    TEST    The command will test a variable.  It must be single on/off value,
            0 or 1.  Depending on the value, either the "on" or "off" branches
            are executed.  The "test" variable may also be a sensor name!
        on      command if the variable is on
        off     command if the variable is off

    SET     Defines a trigger to run when a variable changes.  This should be
            a TEST or LOGIC section normally.  The command will be run async
            so that if a value is set multiple times, it will only be run once.
            NEW: You can now perform the test as part of the trigger.  Commands
            run from a MACRO that end in on/off will now perform variable sets
            and triggers like the URL.
        trigger Name of the section to run when variable is changed
        on      if trigger is not set, and variable is now '1', do this
        off     if trigger is not set, and variable is now '0', do this

    CHECK   Sends a PING to a host to see if it's up.  If the host is up, the
            host is considered to be "on", else it's "off".  You could use a
            WOL section to try to turn it on, or turn it on with an IR command
            defined in "Commands"
        host    IP or hostname of the host to ping
        on      command to run when host is up
        off     command to run when host is down

    SHELL   Used to create commands that can be run as part of a macro that
            be used to do other things, such as send emails, control bluetooth
            devices, make web requests, or interface with CRON (via at/in)
        command     The actual command to run. Warning ... you can use $param
                    expansion here, but it's not recommended for security
        parameters  The parameters to send to the command.  $param is expanded
        shell       This value defaults to 'False' and if set to anything else,
                    it will run the command through a complete subshell.  This
                    is a security hazard!
        store       You can set this to a variable name and the result of the
                    command's execution will be stored in the named variable

    TIMER   Used to perform another command in the future.  Just set seconds,
            minutes, and/or hours (if you name multiple, they are added - so
            an hour an a half is done by setting hours = 1 and minutes = 30).
            To set a recurring event, just use a MACRO that calls the timer
            again.
        command     The command string to run.  Can be real or virtual.  The
                    parameters of the command that triggered the timer are
                    saved and used run the command
    RADIO   Used to set modes that are mutually exclusive.  The state of which
            mode is currently active is saved.  When you execite this command
            you pass in the variable "button" (in parenthesis if a MACRO, or
            in the URL as a parameter) set to the new button you are "pushing"
            The parameters are:
        button0off  Button 0 is the first/default button.  The off command for
                    the old button state is sent before the new button is
                    turned on (break before make).  The off command is optional
        button0on   All buttons have a number and an "on" command.
        button1on   Each button is just the command to execute when the button
                    is pushed.  It will not be sent twice if the same button
                    is pushed twice.
        button1off  Off command are optional.

The LOGIC Section is the ultimate / universal conditional.  It can take many
forms, so we'll devote a bit more area to this one:
        test        The variable name to test is not optional
        compare     If a compare variable is listed, it's compared with the 
                    test.

If there is no compare, the value of "test" can be 0 or 1, which will trigger
        on      This is executed if the variable is a 1 or "on"
        off     This is executed if the variable is a 0 or "off"

The value of "test" may also be a single word string.  If a matching value is
found, it will be executed.  For example, if the "test" value is the sensor
"lights", and it returns a value of "dark", then the "dark = " line will
tell the system what command to go to next!

If the test is numeric, it might be positive or negative or zero.  It may also
be compared to "compare" resulting in a value that is positive or negative,
meaning the test is less, more, or equal to the compare value
        neg     Test is negative
        less    Compare is less than the test
        pos     Test  is positive
        more    Compare is more than the test
        zero    Test is zero (and "off" is not listed)
        equal   Branch if the compare equals test
        else    If none of the above, run else
        error   An exception occured

NOTE: You can use a LOGIC section to perform loops and other controls


EXAMPLE #1

This simple example demonstrates a simple macro using a timer.  You should
always use a timer rather than very long sleep values.  A sleep value will
cause the server to become unavailable for other uses during the sleep.  If
this is intended, use a sleep.  If you want other commands to work, use a
TIMER.  It's pretty simple.   In this example, the 'muteFor30' command sends
a 'mute' command and then triggers the timer to send it again in 30 seconds.

[Commands]
mute = xxxxxxxxxxxxx-IR-CODES-xxxxxxxxxxxxxxx
muteFor30 = MACRO mute muteIn30

[TIMER muteIn30]
seconds = 30
command = mute


EXAMPLE #2

Let's say you want to keep track of the status of a device, to refer to it.

[Commands]
ac78deg = xxxxxxxxxxxxx-IR-CODES-xxxxxxxxxxxxxx
ac82deg = xxxxxxxxxxxxx-IR-CODES-xxxxxxxxxxxxxx

[Status]
Ac = 0

[SET Ac]
trigger = testAcStatus

[LOGIC testAcStatus]
test = Ac
on = ac78deg
off = ac82deg

Here, instead of turning on and off the AC with the AC codes directly, we use
/setStatus/Acon and /setStatus/Acoff URLs.  The SET section defines code to
trigger when the "Ac" value is changed.  The triggered code is "testAcStatus",
a command that is defined as LOGIC which tests the Ac value and then uses
the "on" and "off" branches to actually send the IR codes.

We can now use getStatus/Ac to find out if the AC is on or not.


EXAMPLE #3

This example is bit more contrived, but shows how flexible this can be.  We'll
make the classic "Guess A Number" game.  The person setting the number will
use set the "target" value with /setStatus/target/X where X is the target
number.  The person that wants to guess the number will set their guess with
/setStatus/guess/X   We'll use PRINT statements to return values in JSON

[LOGIC GuessNumber]
test = guess
compare = target
less = PRINT higher
more = PRINT lower
equal = PRINT You guessed it

[SET guess]
trigger = GuessNumber

[SET target]
trigger = PRINT Value set!

The "SET target" line just returns a string for demo purposes and doesn't do
anything special.  The "SET guess" line causes a conditional to be triggered
when the "guess" is set.  The user will get one of the printed lines hinting
about what value to guess next.


WEBHOOK RELAY
-------------

Since this one script can't handle everything, sometimes you might want to
hand off some commands to an external system.  You can use the shell feature
or the new RELAY to hand off to a Webhooks URL.  This lets you execute large
macros where different commands are handled by different devices.

External webhook devices are specified with just a URL.  All parameters
are sent with the request (currently, only Post).  Adding additional
parameters will be supported in the future if anyone needs this feature.
The current command name can be passed as a parameter.  See the example.

EXAMPLE #1

[LivingRoom]
livingRoomLamp = XXXXXXXXXXXX--- IR Command ---XXXXXXXXXXXX
turnoffalllights = MACRO kitchenLightoff livingRoomLampoff
kitchenLightoff = RELAY IFTTT

[IFTTT]
URL = https://maker.ifttt.com/trigger/$command/with/key/$status(API_KEY)

[IFTTT Status]
API_KEY = XXXXXX-YYYYY_ZZZ
kitchenLight = 1


CONCLUSION
----------

This is just a server framework.  It should be complemented with appropriate
logic elsewhere, such as javascript.  By allowing the REST server to make
conditional statements based on persistent state, a much wider variety of
control is possible.  With "Status" sections as variables, Commands expanded
to MACROs as sequential blocks of code, and LOGIC sections for conditions
and loops, a complete programming language is available.  In addition to
sending IR codes, we can test hosts and send WOL packets to wake them.  The
trigger mechanism provides for an easy way to execute code and set values
at the same time.


